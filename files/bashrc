
# vi: ts=2 sw=2 tw=80 et

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

OSNAME=$(uname -s)
if [ "$(uname)" == "Darwin" ]; then
  # macOS
  OSNAME=macOS
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  # Check to see if we are running WSL/WSL2
  if grep microsoft-standard-WSL2 /proc/version >/dev/null 2>&1; then
    # WSL2 is in the version name
    OSNAME=WSL2
  elif grep Microsoft /proc/version >/dev/null 2>&1; then
    # if Microsoft is in the version this is probs Windows Subsystem for Linux
    OSNAME=WSL
  else
    # This should be Linux
    OSNAME=Linux
  fi
elif [ "$(expr substr $(uname -s) 1 5)" == "MINGW" ]; then
  # Windows Mys
  OSNAME=MINGW
elif [ "$(expr substr $(uname -s) 1 6)" == "CYGWIN" ]; then
  # Windows Cygwin
  OSNAME=Cygwin

  # Exporting PWD in cygwin usually breaks other programs
  # that use PWD but don't understand cygwin paths.
  export -n PWD

  # Use native symbolic links and junctions when in cygwin
  export CYGWIN=winsymlinks:nativestrict
fi

if [ -x /usr/bin/lsb_release ]; then
  RELEASE=$(/usr/bin/lsb_release -i -s)
fi

# Add user's bin folder
if [ -d ~/bin ]; then
  export PATH=~/bin:$PATH
fi

for SCRIPT in ~/bin/login/*; do
  if [ -f $SCRIPT -a -x $SCRIPT ]; then
    source $SCRIPT
  fi
done

# Add current dir to path
#export PATH=.:$PATH

# set -o notify
# set -o ignoreeof
set -o vi
shopt -s nocaseglob
shopt -s histappend
shopt -s cdspell
shopt -s checkwinsize
shopt -s globstar

# bash completion
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# history control
HISTSIZE=1000
HISTFILESIZE=2000
HISTCONTROL="ignoreboth"
HISTIGNORE=$'[ \t]*:&:[fb]g:exit'

# These have to come before lesspipe below
export LESS='-SRXF'

# use lesspipe if available
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set debian_chroot if available
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# prompt settings
PROMPT_COMMAND="history -a; history -c; history -r;$PROMPT_COMMAND"
PROMPT_DIRTRIM=5

export GIT_PS1_SHOWUPSTREAM="auto"
#export GIT_PS1_SHOWDIRTYSTATE=1
#export GIT_PS1_SHOWSTASHSTATE=1
#export GIT_PS1_SHOWUNTRACKEDFILES=1
#export GIT_PS1_SHOWCOLORHINTS=1

PS1=
if [ "$TERM" == "cygwin" ]; then
  # colors seem wrong unless bolded
  PS1=${PS1}'\[\e[36;1m\][\h]'
else
  PS1=${PS1}'\[\e[36m\][\h]'
fi
PS1=${PS1}'${OSNAME:+\[\e[35m\][$OSNAME]}'
PS1=${PS1}'${RELEASE:+\[\e[33m\][$RELEASE]}'
PS1=${PS1}'${debian_chroot:+($debian_chroot)}'
PS1=${PS1}'$(                                           \
  if [[ ${EUID} == 0 ]]; then                           \
    echo -n "\[\e[31m\]";                               \
  else                                                  \
    echo -n "\[\e[32m\]";                               \
  fi;                                                   \
)'
PS1=${PS1}'[\u]'
if type -t __git_ps1 &>/dev/null; then
  PS1=${PS1}'$(__git_ps1 "\[\e[35m\][%s]")'
fi
PS1=${PS1}'\[\e[33m\][\w]'
PS1=${PS1}'\[\e[0m\] \$ '

# Set the xterm title
case "$TERM" in
xterm*|rxvt*|screen)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

export NCURSES_NO_UTF8_ACS=1

# gvim shortcut that uses remote vim when available
g() {
  if [ -z "$(which gvim)" ]; then
    vim "$@"
  else
    if [ -z "$(command gvim --serverlist)" ]; then
      command gvim "$@"
    else
      command gvim --remote-silent "$@" ;
    fi
  fi
}

alias v=vim
alias vi=vim
alias ta='tmux attach-session'

# enable color support
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls -hF --color=auto'
  alias ll='ls -hlF --color=auto'
  alias la='ls -haF --color=auto'
  alias lla='ls -hlaF --color=auto'
  alias l='ls -hCF --color=auto'

  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else
  alias ls='ls -hF'
  alias ll='ls -hlF'
  alias la='ls -haF'
  alias lla='ls -hlaF'
  alias l='ls -hCF'
fi

alias df='df -h'
alias du='du -h'

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -d $HOME/.rvm/bin ]; then
  export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
fi

if [ -f ~/.acme.sh/acme.sh.env ]; then
  . ~/.acme.sh/acme.sh.env
fi

if command -v kubectl &>/dev/null; then
  source <(kubectl completion bash)
fi

# run a tmux session
WHOAMI=$(whoami)
if [ ! -f $HOME/.no_tmux -a -x /usr/bin/tmux ]; then
  if [ ! -z "$TMUX" ] ||
     [ "$TERM" == "screen" ] ||
     [ "$TERM" == "screen-256color" ] ||
     [ "$TERM_PROGRAM" == "vscode" ]; then
    # We are inside a session because either $TMUX is set or
    # ($TERM is sceen but this is not an ssh connection)
    :
  else
    # Attempt to discover a detached session and attach
    # it, else create a new session.
    # This needs a bit of a refactor.
    if tmux has-session -t $WHOAMI 2>/dev/null; then
      read -p "Attach to tmux session '$WHOAMI'? [Y/n] " -n 1 -r
      echo
      if ! [[ $REPLY =~ ^[Nn]$ ]]; then
        exec tmux -2 attach-session -t $WHOAMI
      else
        read -p "Do you want a new tmux session? [Y/n] " -n 1 -r
        echo
        if ! [[ $REPLY =~ ^[Nn]$ ]]; then
          # The difference between this one and the one below
          # is that this exec does not set the session name
          # because it already exists.
          exec tmux -2 new-session
        fi
      fi
    else
      if [ ! -f $HOME/.hushlogin ]; then
        read -p "Do you want a new tmux session? [Y/n] " -n 1 -r
        echo
        if ! [[ $REPLY =~ ^[Nn]$ ]]; then
          exec tmux -2 new-session -s $WHOAMI
        fi
      else
          exec tmux -2 new-session -s $WHOAMI
      fi
    fi
  fi
fi

if [ -z "$TMUX" ]; then
  tmux list-sessions 2>/dev/null
fi

if [ -f "${HOME}/.bashrc_local" ]; then
  source "${HOME}/.bashrc_local"
fi
